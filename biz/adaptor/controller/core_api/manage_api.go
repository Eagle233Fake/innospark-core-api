// Code generated by hertz generator.

package core_api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/xh-polaris/innospark-core-api/biz/adaptor"
	manage "github.com/xh-polaris/innospark-core-api/biz/application/dto/manage"
	"github.com/xh-polaris/innospark-core-api/provider"
)

// AdminLogin .
// @router /admin/login [POST]
func AdminLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req manage.AdminLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ManageService.AdminLogin(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// ListUser .
// @router /admin/list_user [POST]
func ListUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req manage.ListUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ManageService.ListUser(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}

// Forbidden .
// @router /admin/forbidden [POST]
func Forbidden(ctx context.Context, c *app.RequestContext) {
	var err error
	var req manage.ForbiddenUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := provider.Get().ManageService.Forbidden(ctx, &req)
	adaptor.PostProcess(ctx, c, &req, resp, err)
}
