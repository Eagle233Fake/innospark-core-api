// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/xh-polaris/innospark-core-api/biz/application/service"
	"github.com/xh-polaris/innospark-core-api/biz/domain/graph"
	"github.com/xh-polaris/innospark-core-api/biz/infra/config"
	"github.com/xh-polaris/innospark-core-api/biz/infra/mapper/conversation"
	"github.com/xh-polaris/innospark-core-api/biz/infra/mapper/feedback"
	"github.com/xh-polaris/innospark-core-api/biz/infra/mapper/message"
)

// Injectors from wire.go:

func NewProvider() (*Provider, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	mongoMapper := message.NewMessageMongoMapper(configConfig)
	historyDomain := &graph.HistoryDomain{
		MsgMapper: mongoMapper,
	}
	completionGraph := graph.DrawCompletionGraph(historyDomain)
	completionsService := &service.CompletionsService{
		CompletionGraph: completionGraph,
	}
	conversationMongoMapper := conversation.NewConversationMongoMapper(configConfig)
	conversationService := &service.ConversationService{
		ConversationMapper: conversationMongoMapper,
		MessageMapper:      mongoMapper,
	}
	feedbackMongoMapper := feedback.NewFeedbackMongoMapper(configConfig)
	feedbackService := &service.FeedbackService{
		MessageMapper:  mongoMapper,
		FeedbackMapper: feedbackMongoMapper,
	}
	userService := &service.UserService{}
	intelligenceService := &service.IntelligenceService{}
	providerProvider := &Provider{
		Config:              configConfig,
		CompletionsService:  completionsService,
		ConversationService: conversationService,
		FeedbackService:     feedbackService,
		UserService:         userService,
		IntelligenceService: intelligenceService,
		CompletionGraph:     completionGraph,
	}
	return providerProvider, nil
}
